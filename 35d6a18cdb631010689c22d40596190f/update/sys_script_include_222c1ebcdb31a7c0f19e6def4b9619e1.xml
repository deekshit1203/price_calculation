<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_atpu_rtsm.ProcessingResult</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>/**
 *   Product: Service Event Management
 *   Application: ServiceEvent
 *   Component: ProcessingResult
 *   Functions: checkCIRelationForLoop, createCILoopDetectedEvent
 *   Tables Accessed: NA
 *   Which objects call this Script Include: NA
 *   Purpose: Helper object to transfer resuls from script CITreeSP
 *   Ref: ASN-3449
 *   Change logs: 11/15/2018 - Initial Version
 *   Limitations: N/A
 *   Required dependencies with version: N/A
 */</description>
        <name>ProcessingResult</name>
        <script><![CDATA[/**SNDOC
	@name ProcessingResult
	@description Helper object to transfer resuls from script CITreeSP
	@domain Processing Queue Manager
	@author Thomas Grensemann
	@mail thomas.grensemann@atos.net
	@require N/A
	@version 1.0.0
	*/
var ProcessingResult = Class.create();
ProcessingResult.prototype = {

    /**SNDOC
    	@name 
    	@description 
    	@param {*} [errorMessage] -  
    	@param {*} [processingResult] -  
    	@param {*} [processingDuration] -  
    	@param {*} [state] -  
    	*/
    initialize: function (errorMessage, processingResult, processingDuration, state) {
		this.qResult = RTSMConst.QueueProcessingResult;	
                
        this.errorMessage = errorMessage;
        this.processingResult = processingResult;
        this.processingDuration = processingDuration;
        this.qState = state;
        this.deadLeaves = 0;
        this.validLeaves = 0;
        this.deadLeaveObjects = Object.create(null);
        this.validLeaveObjects = Object.create(null);
        this.uniqueCis = 0;
    },
    /**SNDOC
    	@name getErrorMessage
    	@returns {string} error Message
    	*/
    getErrorMessage: function () {
        return this.errorMessage;
    },
    /**SNDOC
    	@name setErrorMessage
    	*/
    setErrorMessage: function (errorMessage) {
        this.errorMessage = errorMessage;
    },
    /**SNDOC
    	@name getProcessingResult
    	@returns {Object} processingResult
    	*/
    getProcessingResult: function () {
        return this.processingResult;
    },
    /**SNDOC
    	@name setProcessingResult
    	@param {*} [setProcessingResult] - the value to be set as processing result
    	*/
    setProcessingResult: function (processingResult) {
        this.processingResult = processingResult;
    },
    /**SNDOC
    	@name getProcessingDuration
    	@returns {*} processingDuration
    	*/
    getProcessingDuration: function () {
        return this.processingDuration;
    },
    /**SNDOC
    	@name setProcessingDuration
    	*/
    setProcessingDuration: function (processingDuration) {
        this.processingDuration = processingDuration;
    },
    /**SNDOC
    	@name getState
    	@returns {*} state
    	*/
    getState: function () {
        return this.qState;
    },
    /**SNDOC
    	@name setState
    	*/
    setState: function (state) {
        this.qState = state;
    },


    //#### methods for dead leaves ########
    /**SNDOC
    	@name increaseDeadLeave
    	@description this.deadLeaves + 1
    	*/
    increaseDeadLeave: function () {
        this.deadLeaves = this.deadLeaves + 1;
    },
    /**SNDOC
    	@name addDeadLeaveObject
    	@description add an object to the the deed leaves map
    	@param {string} [sysId] - description
    	@param {*} [processedObject] - description
    	*/
    addDeadLeaveObject: function (sysId, processedObject) {
        this.deadLeaveObjects[sysId] = processedObject;
    },
    /**SNDOC
    	@name getDeadLeaveObjects
    	@description return map of dead leaves dict[sys_id, obj]
    	@returns {object}  map of dead leaves dict[sys_id, obj]
    	*/
    getDeadLeaveObjects: function () {
        return this.deadLeaveObjects;
    },
    /**SNDOC
    	@name deadLeavesCount
    	@description count of dead leave objects
    	@returns {number} count of dead leaves
    	*/
    deadLeavesCount: function () {
        return this.deadLeaves;
    },

    //#### methods for valide leaves ########
    /**SNDOC
    	@name increaseValidLeave
    	@description this.validLeaves + 1
    	*/

    increaseValidLeave: function () {
        this.validLeaves = this.validLeaves + 1;
    },
    /**SNDOC
    	@name validLeavesCount
    	@description count of valid leave objects
    	@returns {number} count of dead leaves
    	*/
    validLeavesCount: function () {
        return this.validLeaves;
    },
    /**SNDOC
    	@name addValidLeaveObject
    	@description add an object to the the valid leaves map
    	@param {string} [sysId] - description
    	@param {*} [processedObject] - description
    	*/
    addValidLeaveObject: function (sysId, processedObject) {
        this.validLeaveObjects[sysId] = processedObject;
        this.uniqueCis = Object.keys(this.validLeaveObjects).length;
    },
    /**SNDOC
    	@name getValidLeaveObjects
    	@description return map of valid leaves dict[sys_id, obj]
    	@returns {object}  map of valid leaves dict[sys_id, obj]
    	*/
    getValidLeaveObjects: function () {
        return this.validLeaveObjects;
    },
    /**SNDOC
    	@name calculatedCIs
    	@description Number of valid leave objects
    	@returns {number} Number of valid leave objects
    	*/
    calculatedCIs: function () {
        return this.uniqueCis;
    },
    /**SNDOC
    	@name toString
    	@description Return the processing result details as string
    	@returns {string} the processing result details as string
    	*/
    toString: function () {
        return '{"errorMessage":"' + this.getErrorMessage() + '","processingResult":"' + this.getProcessingResult() + '","processingDuration":' + this.getProcessingDuration() + ',"state":"' + this.getState() + '","deadLeaves":' + this.deadLeaves + '","validLeaves":' + this.validLeaves + '"}';
    },
    /**SNDOC
    	@name setError
    	@description Set the processing result to this.qResult.ERROR and the error message.
    	@param {*} [errorMessage] - The error message
    	*/
    setError: function (errorMessage) {       
        this.setProcessingResult(this.qResult.ERROR);
        this.setErrorMessage(errorMessage);
    },
    /**SNDOC
    	@name setOk
    	@description Set the processing result to OK and the error message to ''.
    	@param {*} [errorMessage] - The error message
    	*/
    setOk: function () {
        this.setProcessingResult(this.qResult.OK);
        this.setErrorMessage("");
    },
    /**SNDOC
    	@name isError
    	@description if processingResult == this.qResult.ERROR -> true
    	@returns {Boolean} true if processing result is in error
    	*/
    isError: function () {
        if (this.processingResult == this.qResult.ERROR) {
            return true;
        }
        return false;
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>andreas.reermann@atos.net</sys_created_by>
        <sys_created_on>2020-09-25 10:27:12</sys_created_on>
        <sys_id>222c1ebcdb31a7c0f19e6def4b9619e1</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>ProcessingResult</sys_name>
        <sys_package display_value="RTSM" source="x_atpu_rtsm">35d6a18cdb631010689c22d40596190f</sys_package>
        <sys_policy/>
        <sys_scope display_value="RTSM">35d6a18cdb631010689c22d40596190f</sys_scope>
        <sys_update_name>sys_script_include_222c1ebcdb31a7c0f19e6def4b9619e1</sys_update_name>
        <sys_updated_by>andreas.reermann@atos.net</sys_updated_by>
        <sys_updated_on>2020-12-09 10:12:39</sys_updated_on>
    </sys_script_include>
</record_update>
