<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_atpu_rtsm.CITreeSPProcessorRecalcCustomer</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Processor for queue type  recalcCustomer</description>
        <name>CITreeSPProcessorRecalcCustomer</name>
        <script><![CDATA[/**SNDOC
	@name CITreeSPProcessorRecalcCustomer
	@description 
	@domain Impact Calculation
	@author ATF2SEV
	@version 1.0.0
	*/
var CITreeSPProcessorRecalcCustomer = Class.create();
CITreeSPProcessorRecalcCustomer.prototype = Object.extendsObject(CITreeSPProcessor, {
/**SNDOC
	@name initialize
	@description 
	*/
	initialize: function() {
		CITreeSPProcessor.prototype.initialize.call(this);
		this.log = new RTSMLog(RTSMLog.LOG_TYPE_SI, "CITreeSPProcessorRecalcCustomer");

	},
/**SNDOC
	@name process
	@description 
	*/
	process: function() {
		//update "Is Valid" flag to false for all Customer CIs
		var customer =  this.queueEntry.getValue("customer");
		
		var ciTreeSPCustomers = new GlideRecord('x_atpu_rtsm_ci_tree_state_persistency');
		ciTreeSPCustomers.addQuery('alert_ci.company', customer);
		ciTreeSPCustomers.query();
		ciTreeSPCustomers.setValue('is_valid', false);
		ciTreeSPCustomers.updateMultiple();  

		
		//fetch most bottom CIs, return result is a HashMap
		var hashMapObj = new CSCalcHelper().calcMostBottomCIs(customer, this.result);
		if(this.result.isError() == true){
			this.log.error('process: Most bottom CI is not available '+ hashMapObj);
			return false;
		}

		this.log.logObject(hashMapObj, "[CITreeSPProcessorRecalcCustomer.process] hashMapObj");
		this.log.info('[CITreeSPProcessorRecalcCustomer.process]: Most bottom CI is available '+ hashMapObj);

		//insert Funnel Filler entry for each CI from the HashMap

		for (var ciSysID in hashMapObj) {
			var tempCIRecord = new GlideRecord("cmdb_ci");
			tempCIRecord.get(ciSysID.toString());
			
			var funnelFillerRecalcCI = new FunnelFiller().insert(RTSMConst.QO.recalcCI, { ci: tempCIRecord.sys_id, customer: customer, queueData: null });
		}

		//insert funnel filler entry for the customer Leftover operation
		global.RTSMGlobalScopeUtils.sleep(2000); // 2 seconds delay before inserting "recalcCustomerLeftover"

		var funnelFillerCustomerLeftover = new FunnelFiller().insert(RTSMConst.QO.recalcCustomerLeftover, customer);

		return true;		
	},

	type: 'CITreeSPProcessorRecalcCustomer'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>andreas.reermann@atos.net</sys_created_by>
        <sys_created_on>2020-09-25 10:27:12</sys_created_on>
        <sys_id>c8930eb8dbd537448471a7c7489619bd</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>CITreeSPProcessorRecalcCustomer</sys_name>
        <sys_package display_value="RTSM" source="x_atpu_rtsm">35d6a18cdb631010689c22d40596190f</sys_package>
        <sys_policy/>
        <sys_scope display_value="RTSM">35d6a18cdb631010689c22d40596190f</sys_scope>
        <sys_update_name>sys_script_include_c8930eb8dbd537448471a7c7489619bd</sys_update_name>
        <sys_updated_by>hoa.nguyen</sys_updated_by>
        <sys_updated_on>2021-08-09 08:34:21</sys_updated_on>
    </sys_script_include>
</record_update>
